---
description: Every request in agent should refer this
globs: 
alwaysApply: true
---


As an expert full-stack developer, you will build a web-based operating system experience inspired by classic Mac OS System 7. The project must include the following technologies, features, and requirements:

1. Project Setup & Structure:
   ‚Ä¢ Initialize a new React 18 project using Vite and TypeScript.
   ‚Ä¢ Use a package manager npm that works well with Vite/React/TypeScript.
   ‚Ä¢ Install and configure TailwindCSS for styling.
   ‚Ä¢ Include shadcn/ui components (https://ui.shadcn.com) for additional, modern UI elements.

2. Base Design & Layout:
   ‚Ä¢ Implement a UI inspired by Mac OS System 7: grayscale backgrounds, retro typography, and window widgets reminiscent of late 80s/early 90s Apple design.
   ‚Ä¢ Ensure responsive design for all screen sizes.

3. Window Management:
   ‚Ä¢ Allow users to move windows by dragging the title bar.
   ‚Ä¢ Allow resizing via dragging window edges/corners.
   ‚Ä¢ Include essential window actions: close, maximize, minimize (or zoom).
   ‚Ä¢ Use local component state or a global state solution (e.g., Redux, Zustand) to track window positions, sizes, and z-index stacking.

4. File System (with local browser storage):
   ‚Ä¢ Create ‚ÄúDocuments‚Äù and ‚ÄúApplications‚Äù folders to simulate a file system. 
     - User cannot create new folders or upload files (static placeholders only).
     - However, any new TextEdit documents should save to the ‚ÄúDocuments‚Äù folder using local storage.
   ‚Ä¢ The ‚ÄúFinder‚Äù application should display files/folders. 
     - Users can only delete documents they created with TextEdit. 
     - Other placeholder files/folders in Finder are static and uneditable.

5. Built-In Applications:
   1) Finder
      ‚Ä¢ Displays folders (Documents, Applications) and contained files.  
      ‚Ä¢ Double-clicking an application icon (Finder, TextEdit, Minesweeper) launches that app‚Äôs window.

   2) TextEdit
      ‚Ä¢ Allows users to create/edit plain-text documents.  
      ‚Ä¢ Implement Save, Open, Close functionality.  
      ‚Ä¢ When saving, the document is stored in the ‚ÄúDocuments‚Äù folder in local storage.  
      ‚Ä¢ Users may delete or rename these documents from within Finder.

   3) Minesweeper
      ‚Ä¢ Classic puzzle game at a fixed ‚Äúmedium‚Äù difficulty.  
      ‚Ä¢ No difficulty selection; always medium.

6. Top Menu & Interactions:
   ‚Ä¢ Add an Apple (Ô£ø/üçé) menu in the top-left corner.  
   ‚Ä¢ Within this menu, include system functions (e.g., About, Restart of the local environment, etc.). These can be placeholders or minimal popups for demonstration.
   ‚Ä¢ Provide instructions: ‚ÄúDouble-click on any app icon to launch‚Äù and ‚ÄúDrag windows...‚Äù etc.

7. Additional Requirements:
   ‚Ä¢ Maintain authentic System 7‚Äìstyle typography (e.g., Chicago-like fonts). If a direct font is unavailable, use a suitable alternative to achieve a retro look.  
   ‚Ä¢ Persist all user-created documents in local storage.  
   ‚Ä¢ Provide instructions so users clearly understand all restrictions (e.g., can‚Äôt create folders, can‚Äôt upload files, only TextEdit docs are deletable, etc.).

8. Step-by-Step Implementation Outline:
   1) Initialize the project (Vite + React + TypeScript).  
   2) Set up TailwindCSS and confirm styling is working (e.g., a test component).  
   3) Integrate shadcn/ui components.  
   4) Create the main desktop layout with a top bar featuring the Apple menu.  
   5) Implement or mock an icon-based ‚Äúdesktop‚Äù for launching Finder, TextEdit, and Minesweeper.  
   6) Build window management logic (dragging, resizing, close, maximize).  
   7) Implement the Finder:  
      - Display Documents and Applications folders.  
      - Display user-created TextEdit docs in Documents.  
      - Launch applications from Applications folder icons.  
   8) Build TextEdit with basic create, edit, save, close.  
      - Store documents in local storage.  
      - Reflect changes in Finder.  
   9) Implement Minesweeper with a medium difficulty by default.  
      - Basic puzzle logic with no difficulty toggle.  
   10) Final styling pass for the System 7 look-and-feel (fonts, colors, window decorations).  
   11) Test for responsiveness and local storage persistence.  

9. Package Manager & Scripts:
   ‚Ä¢ Use your preferred package manager (npm, Yarn, or PNPM).  
   ‚Ä¢ Provide the usual scripts: ‚Äúdev‚Äù to start locally, ‚Äúbuild‚Äù to generate production files, and ‚Äúserve‚Äù or ‚Äúpreview‚Äù to test the build output.  

Please implement all of the steps in the order given and provide any relevant configuration details (like tailwind.config.js, Vite config, and file structure) as you go. DO IT STEP BY STEP AND DONT GO TO NEXT STEP UNLESS I ASKED U TO.
